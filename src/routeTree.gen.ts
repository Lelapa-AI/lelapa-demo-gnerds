/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TranscribeImport } from './routes/transcribe'
import { Route as ProfileImport } from './routes/profile'
import { Route as ChatImport } from './routes/chat'

// Create Virtual Routes

const TranslateLazyImport = createFileRoute('/translate')()
const ProjectLazyImport = createFileRoute('/project')()
const LanguageLazyImport = createFileRoute('/language')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TranslateLazyRoute = TranslateLazyImport.update({
  path: '/translate',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/translate.lazy').then((d) => d.Route))

const ProjectLazyRoute = ProjectLazyImport.update({
  path: '/project',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/project.lazy').then((d) => d.Route))

const LanguageLazyRoute = LanguageLazyImport.update({
  path: '/language',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/language.lazy').then((d) => d.Route))

const TranscribeRoute = TranscribeImport.update({
  path: '/transcribe',
  getParentRoute: () => rootRoute,
} as any)

const ProfileRoute = ProfileImport.update({
  path: '/profile',
  getParentRoute: () => rootRoute,
} as any)

const ChatRoute = ChatImport.update({
  path: '/chat',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatImport
      parentRoute: typeof rootRoute
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileImport
      parentRoute: typeof rootRoute
    }
    '/transcribe': {
      id: '/transcribe'
      path: '/transcribe'
      fullPath: '/transcribe'
      preLoaderRoute: typeof TranscribeImport
      parentRoute: typeof rootRoute
    }
    '/language': {
      id: '/language'
      path: '/language'
      fullPath: '/language'
      preLoaderRoute: typeof LanguageLazyImport
      parentRoute: typeof rootRoute
    }
    '/project': {
      id: '/project'
      path: '/project'
      fullPath: '/project'
      preLoaderRoute: typeof ProjectLazyImport
      parentRoute: typeof rootRoute
    }
    '/translate': {
      id: '/translate'
      path: '/translate'
      fullPath: '/translate'
      preLoaderRoute: typeof TranslateLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  ChatRoute,
  ProfileRoute,
  TranscribeRoute,
  LanguageLazyRoute,
  ProjectLazyRoute,
  TranslateLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/chat",
        "/profile",
        "/transcribe",
        "/language",
        "/project",
        "/translate"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/chat": {
      "filePath": "chat.jsx"
    },
    "/profile": {
      "filePath": "profile.jsx"
    },
    "/transcribe": {
      "filePath": "transcribe.jsx"
    },
    "/language": {
      "filePath": "language.lazy.jsx"
    },
    "/project": {
      "filePath": "project.lazy.jsx"
    },
    "/translate": {
      "filePath": "translate.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
